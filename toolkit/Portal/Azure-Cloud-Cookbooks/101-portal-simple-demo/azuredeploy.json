{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.210615",
    "parameters": {
      "version" : {
        "type": "string",
        "defaultValue": "3.5.0",
        "allowedValues" : [
          "3.5.0"
        ],
        "metadata": {
          "description": "Version of Riverbed Portal"
        }        
      },
      "applianceSourceImageBlobUri" : {
        "type": "securestring",
        "metadata": {
          "description": "uri of the Blob containing the Portal VHD image source. For example: https://your-source-storage-account.blob.core.windows.net/vhd/Portal_3.5.0.vhd"
        }
      },
      "applianceSize" : {
        "type": "string",
        "defaultValue": "Standard_E8s_v4",
        "metadata": {
          "description": "Size of the Azure VM used for the appliance. Minimum: Standard_B8ms"
        }  
      },
      "demoJumpboxUsername" :{
        "type": "string",
        "defaultValue": "riverbed-community",
        "metadata": {
          "description": "Username for the demo jumpbox"
        }
      },
      "demoJumpboxPassword" :{
        "type": "securestring",
        "defaultValue": "Performance&Visibility4Cloud",
        "metadata": {
          "description": "Password for the demo jumpbox"
        }
      }      
    },
    "functions": [],
    "variables": {
      "location" : "[resourceGroup().location]", // The location in which the resources should be deployed. Leave [resourceGroup().location] to use the region set for the resource group
      "linkedTemplateName_Create-WritableBlobContainerUri": "Create-WritableBlobContainerUri",
      "linkedTemplateName_ImportVHD_Portal": "ImportVHD-FromVhdBlob_Portal",
      "linkedTemplateName_vnet-riverbed-headend": "vnet-riverbed-headend",
      "linkedTemplateName_bastion": "bastion",
      "linkedTemplateName_steeldemo-visibility-vm": "steeldemo-visibility-vm",
      "linkedTemplateName_portal": "portal"
    },
    "resources": [
      {
          "apiVersion": "2021-04-01",
          "name": "pid-51101d94-d763-4a22-a013-70b34c88fdbf",
          "type": "Microsoft.Resources/deployments",
          "properties": {
              "mode": "Incremental",
              "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
              }
          }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2021-04-01",
        "name": "[variables('linkedTemplateName_Create-WritableBlobContainerUri')]",
        "properties": {
          "mode": "Incremental",
          "expressionEvaluationOptions": {
              "scope": "inner"
          },          
          "parameters": {
            "location":{
              "value":"[variables('location')]"
            }
          },
          "template": {          
            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
            "contentVersion": "1.0.0.210530",
            "parameters": {
                "location": {
                    "type": "string",
                    "defaultValue": "francecentral"
                },
                "storageAccountName": {
                    "type": "string",
                    "defaultValue": "[uniqueString(resourceGroup().id)]",
                    "metadata": {
                        "description": "Name of Storage Account."
                    }
                },
                "blobContainerName": {
                    "type":"string",
                    "defaultValue" : "vhd",
                    "metadata":{
                        "description" : "Name of the Blob Container"
                    }
                },
                "storageAccountKind": {
                    "type": "string",
                    "defaultValue" : "StorageV2"
                },
                "storageAccountSkuName": {
                    "type": "string",
                    "defaultValue": "Standard_LRS",
                    "allowedValues": [
                        "Standard_LRS",
                        "Premium_LRS",
                        "Standard_ZRS",
                        "Standard_GRS"                               
                    ],
                    "metadata": {
                        "description": "Storage Account SKU"
                    }
                },
                "sasTokenDuration" : {
                    "type": "int",
                    "defaultValue": 4,
                    "metadata" : {
                        "description" : "SAS Token duration (hours)"
                    }
                },
                "forceUpdateTag": {
                    "type": "string",
                    "defaultValue": "[newGuid()]",
                    "metadata": {
                        "description": "forceUpdateTag property, used to force the execution of the script resource when no other properties have changed."
                }
              }
            },
            "variables": {
                "deploymentScriptName" : "CreateWritableBlobContainerUri",
                "userAssignedIdentityName": "[concat('Create-WritableBlobContainerUri-worker',uniqueString(resourceGroup().id))]",
                "roleAssignmentName": "[guid(concat(variables('userAssignedIdentityName'),resourceGroup().id, 'contributor'))]",
                "forceUpdateTag" : "[parameters('forceUpdateTag')]"
            },
            "resources": [
                {
                    "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                    "apiVersion": "2018-11-30",
                    "name": "[variables('userAssignedIdentityName')]",
                    "location": "[parameters('location')]"
                },
                {
                    "type": "Microsoft.Authorization/roleAssignments",
                    "apiVersion": "2018-09-01-preview",
                    "name": "[variables('roleAssignmentName')]",
                    "dependsOn": [ "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName'))]" ],
                    "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName')), '2015-08-31-preview').principalId]",
                        "scope": "[resourceGroup().id]",
                        "principalType": "ServicePrincipal"
                    }
                },
                {
                    "apiVersion": "2021-02-01",
                    "type": "Microsoft.Storage/storageAccounts",
                    "name": "[parameters('storageAccountName')]",
                    "location": "[parameters('location')]",
                    "sku": {
                        "name": "[parameters('storageAccountSkuName')]"
                    },
                    "kind": "[parameters('storageAccountKind')]",
                    "resources": [
                        {
                            "name": "[concat('default/', parameters('blobContainerName'))]",
                            "type": "blobServices/containers",
                            "apiVersion": "2021-02-01",
                            "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                            ],
                            "properties": {
                                "publicAccess": "Blob"
                            }
                        }
                    ]
                },
                {
                    "type": "Microsoft.Resources/deploymentScripts",
                    "apiVersion": "2020-10-01",
                    "name": "[variables('deploymentScriptName')]",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                    ],
                    "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                            "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',variables('userAssignedIdentityName'))]": {}
                        }
                    },        
                    "kind": "AzurePowerShell",
                    "properties": {
                    "azPowerShellVersion": "5.5",
                    "cleanupPreference": "OnSuccess",
                    "arguments": "[concat('-StorageAccountName \\\"',parameters('storageAccountName'),'\\\"',' ','-BlobContainerName \\\"',parameters('blobContainerName'),'\\\"',' ','-sasTokenDuration \\\"',parameters('SasTokenDuration'),'\\\"')]",
                    "environmentVariables": [
                        {
                            "name": "ResourceGroupName",
                            "value": "[resourceGroup().name]"
                        }
                    ],
                    "forceUpdateTag": "[variables('forceUpdateTag')]",
                    "retentionInterval": "PT2H",
                    "scriptContent" : "param( \n    [string] $StorageAccountName, \n    [string] $BlobContainerName, \n    [int] $SasTokenDuration = 4 \n) \n \n##### Parameters \n \n$StorageAccountName \n$BlobContainerName \n$SasTokenDuration \n$ResourceGroupName = ${Env:ResourceGroupName} \n \n##### Variables \n \n$StartTime = Get-Date \n$EndTime = $startTime.AddHours($SasTokenDuration) \n \n##### Storage account \n \n$StorageAccount = Get-AzStorageAccount -ResourceGroupName $ResourceGroupName -Name $StorageAccountName \n$uriWritableStorageAccountBlobContainerSasToken = New-AzStorageContainerSASToken -FullUri -Name $BlobContainerName -context $StorageAccount.Context  -Permission rawcl  -StartTime $StartTime -ExpiryTime $EndTime \n \n##### Output \n$DeploymentScriptOutputs = @{} \n$DeploymentScriptOutputs['uriWritableStorageAccountBlobContainerSasToken'] = $uriWritableStorageAccountBlobContainerSasToken"
                    }
                }
            ],
            "outputs" : {
                "uriWritableStorageAccountBlobContainerSasToken": {
                    "type": "string",
                    "value": "[reference(variables('deploymentScriptName')).outputs.uriWritableStorageAccountBlobContainerSasToken]"
                },
                "storageAccountName" : {
                    "type": "string",
                    "value": "[parameters('storageAccountName')]"
                },
                "uriBlobContainer" : {
                    "type": "string",
                    "value" : "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))).primaryEndpoints.blob, parameters('blobContainerName'))]"       
                },
                "uriBlobStorage" : {
                    "type": "string",
                    "value" : "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))).primaryEndpoints.blob)]"       
                },
                "storageAccountId" : {
                    "type" : "string",
                    "value" : "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                }
            }
          }            
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2021-04-01",
        "name": "[variables('linkedTemplateName_ImportVHD_Portal')]",
        "dependsOn": [ 
          "[variables('linkedTemplateName_Create-WritableBlobContainerUri')]"
        ],
        "properties": {
          "mode": "Incremental",
          "expressionEvaluationOptions": {
              "scope": "inner"
          },          
          "parameters": {
            "Source": {
              "value": "[parameters('applianceSourceImageBlobUri')]"
            },
            "Destination": {
              "value": "[reference(variables('linkedTemplateName_Create-WritableBlobContainerUri')).outputs.uriWritableStorageAccountBlobContainerSasToken.value]"
            }
          },
          "template":
            {
                "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                "contentVersion": "1.0.0.210607",
                "parameters": {
                    "Source": {
                        "type": "securestring",
                        "metadata": {
                            "description": "URI of the VHD to fetch (Blob URI with SAS Token)"
                        }
                    },
                    "Destination": {
                        "type": "securestring",
                        "metadata": {
                            "description": "URI of the Storage Account container with a writable SAS Token"
                        }
                    },
                    "forceUpdateTag": {
                        "type": "string",
                        "defaultValue": "[newGuid()]",
                        "metadata": {
                            "description": "Used to force the execution when redeploying the template with the same parameters. Default: [newGuid()]"
                        }
                    },
                    "location": {
                        "type": "string",
                        "defaultValue": "[resourceGroup().location]",
                        "metadata": {
                            "description": "The location in which the resources should be deployed. Default: [resourceGroup().location]"
                        }
                    }
                },
                "variables": {
                    "uriVHDBlobSasToken": "[parameters('Source')]",
                    "uriWritableStorageAccountBlobContainerSasToken": "[parameters('Destination')]",
                    "deploymentScriptName": "[concat('ImportVHD-FromBlobUri-',uniqueString(parameters('Source'),uniqueString(parameters('Destination'))))]",
                    "forceUpdateTag": "[parameters('forceUpdateTag')]"
                },
                "resources": [
                    {
                        "type": "Microsoft.Resources/deploymentScripts",
                        "apiVersion": "2020-10-01",
                        "name": "[variables('deploymentScriptName')]",
                        "location": "[parameters('location')]",
                        "kind": "AzurePowerShell",
                        "properties": {
                            "azPowerShellVersion": "5.5",
                            "cleanupPreference": "OnSuccess",
                            "environmentVariables": [
                                {
                                    "name": "Source",
                                    "secureValue": "[variables('uriVHDBlobSasToken')]"
                                },
                                {
                                    "name": "Destination",
                                    "secureValue": "[variables('uriWritableStorageAccountBlobContainerSasToken')]"
                                }
                            ],                
                            "forceUpdateTag": "[variables('forceUpdateTag')]",
                            "retentionInterval": "PT4H",
                            "scriptContent": "# 210607 \n  \n param( \n # Set default url to fetch azcopy  \n ## get latest: curl -s -D- https://aka.ms/downloadazcopy-v10-linux | grep ^Location  \n ## 10.10.0: sporadic vhd corruption issue / fatal error lifecyleMgr.go:38 (https://azcopyvnext.azureedge.net/release20210415/azcopy_linux_amd64_10.10.0.tar.gz)  \n ## 10.9.0: sporadic vhd corruption issue https://azcopyvnext.azureedge.net/release20210226/azcopy_linux_amd64_10.9.0.tar.gz  \n ## 10.8.0: validated https://azcopyvnext.azureedge.net/release20201211/azcopy_linux_amd64_10.8.0.tar.gz  \n [string] $azcopyArchiveUrl = 'https://azcopyvnext.azureedge.net/release20201211/azcopy_linux_amd64_10.8.0.tar.gz'  \n ) \n  \n ##### Parameters  \n  \n $uriVhdBlob = ${Env:Source} \n $uriWritableStorageAccountBlobContainerSasToken = ${Env:Destination} \n  \n ##### Validate Parameters \n  \n if (! ([System.Uri]::IsWellFormedUriString($uriVhdBlob,[System.UriKind]::Absolute))) { \n     Throw 'The Source URI parameter is probably not well formatted. Please check and retry.' \n } \n  \n if (! ([System.Uri]::IsWellFormedUriString($uriWritableStorageAccountBlobContainerSasToken,[System.UriKind]::Absolute))) {  \n     Throw 'The Destination URI parameter is probably not well formatted. Please check and retry.' \n } \n  \n ##### Variables \n  \n $base_path='/mnt/azscripts' \n $temp_path='{0}/temp' -f $base_path \n New-Item -Type Directory -ErrorAction SilentlyContinue $temp_path \n  \n ##### Fetch prerequisites \n  \n Invoke-WebRequest -Uri $azcopyArchiveUrl -Outfile azcopy-linux.tar.gz \n tar xf azcopy-linux.tar.gz \n Move-Item azcopy_linux_*/azcopy . -Force \n  \n ##### Upload to Azure Storage account \n  \n Write-Output 'Copy Blob' \n ./azcopy copy \"$uriVhdBlob\" \"$uriWritableStorageAccountBlobContainerSasToken\" \n  \n if (! $?) { \n     Throw 'Error during upload into the Storage Account Container. Please check source and destination parameters and retry' \n } \n  \n ##### Output \n  \n $DeploymentScriptOutputs = @{} \n $VhdBlobName = $uriVhdBlob -replace '.*/(?<name>.*.VHD).*','${name}' \n $DeploymentScriptOutputs['vhdBlobName'] = $VhdBlobName \n $StorageAccountContainerUri = ($uriWritableStorageAccountBlobContainerSasToken -split [Regex]::Escape('?'))[0] \n $DeploymentScriptOutputs['vhdBlobUri'] = '{0}/{1}' -f $StorageAccountContainerUri,$VhdBlobName \n "
                        }
                    }
                ],
                "outputs": {
                    "vhdBlobUri": {
                        "type": "string",
                        "value": "[reference(variables('deploymentScriptName')).outputs.vhdBlobUri]"
                    }
                }
            }
        }
      },

      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2021-04-01",
        "name": "[variables('linkedTemplateName_vnet-riverbed-headend')]",
        "properties": {
          "mode": "Incremental",
          "expressionEvaluationOptions": {
              "scope": "inner"
          },          
          "parameters": {
            "location":{
              "value":"[variables('location')]"
            }
          },
          "template":
          {
              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
              "contentVersion": "1.0.0.201115",
              "parameters": {
                "location": {
                  "type": "string",
                  "defaultValue": "[resourceGroup().location]",
                  "metadata": {
                    "description": "The location in which the resources should be deployed."
                  }
                },
                "virtualNetworkName": {
                  "type": "string",
                  "metadata": {
                    "Description": "The name of the Virtual Network to Create"
                  },
                  "defaultValue" : "riverbed-community-headend"
                },
                "virtualNetworkAddressRange": {
                  "type": "string",
                  "metadata": {
                    "Description": "The address range of the new VNET in CIDR format"
                  },
                  "defaultValue": "10.100.0.0/16"
                },
                "subnetName_Management": {
                  "type": "string",
                  "metadata": {
                    "Description": "The name of the subnet for Management"
                  },
                  "defaultValue": "Management"
                },
                "subnetRange_Management": {
                  "type": "string",
                  "metadata": {
                    "Description": "The address range of the subnet created in the new VNET for Management"
                  },
                  "defaultValue": "10.100.1.0/24"
                },
                "subnetName_Control": {
                  "type": "string",
                  "metadata": {
                    "Description": "The name of the subnet for Control"
                  },
                  "defaultValue": "Control"
                },
                "subnetRange_Control": {
                  "type": "string",
                  "metadata": {
                    "Description": "The address range of the subnet created in the new VNET for Control"
                  },
                  "defaultValue": "10.100.2.0/24"
                },
                "subnetName_Analytics": {
                  "type": "string",
                  "metadata": {
                    "Description": "The name of the subnet for Analytics"
                  },
                  "defaultValue": "Analytics"
                },
                "subnetRange_Analytics": {
                  "type": "string",
                  "metadata": {
                    "Description": "The address range of the subnet created in the new VNET for Analytics"
                  },
                  "defaultValue": "10.100.3.0/24"
                },
                "subnetName_Performance": {
                  "type": "string",
                  "metadata": {
                    "Description": "The name of the subnet for Performance"
                  },
                  "defaultValue": "Performance"
                },
                "subnetRange_Performance": {
                  "type": "string",
                  "metadata": {
                    "Description": "The address range of the subnet created in the new VNET for Performance"
                  },
                  "defaultValue": "10.100.4.0/24"
                },
                "subnetName_Monitoring": {
                  "type": "string",
                  "metadata": {
                    "Description": "The name of the subnet for Monitoring"
                  },
                  "defaultValue": "Monitoring"
                },
                "subnetRange_Monitoring": {
                  "type": "string",
                  "metadata": {
                    "Description": "The address range of the subnet created in the new VNET for Monitoring"
                  },
                  "defaultValue": "10.100.5.0/24"
                },
                "subnetName_Workloads": {
                  "type": "string",
                  "metadata": {
                    "Description": "The name of the subnet for Workloads"
                  },
                  "defaultValue": "Workloads"
                },
                "subnetRange_Workloads": {
                  "type": "string",
                  "metadata": {
                    "Description": "The address range of the subnet created in the new VNET for Workloads"
                  },
                  "defaultValue": "10.100.50.0/24"
                },
                "subnetName_Kubernetes": {
                  "type": "string",
                  "metadata": {
                    "Description": "The name of the subnet for Kubernetes"
                  },
                  "defaultValue": "Kubernetes"
                },
                "subnetRange_Kubernetes": {
                  "type": "string",
                  "metadata": {
                    "Description": "The address range of the subnet created in the new VNET for Kubernetes"
                  },
                  "defaultValue": "10.100.80.0/24"
                },
                "subnetName_Accelerator": {
                  "type": "string",
                  "metadata": {
                    "Description": "The name of the subnet for Accelerator"
                  },
                  "defaultValue": "Accelerator"
                },
                "subnetRange_Accelerator": {
                  "type": "string",
                  "metadata": {
                    "Description": "The address range of the subnet created in the new VNET for Accelerator"
                  },
                  "defaultValue": "10.100.82.0/24"
                },
                "subnetRange_Bastion": {
                  "type": "string",
                  "metadata": {
                    "Description": "The address range of the subnet created in the new VNET for Bastion"
                  },
                  "defaultValue": "10.100.253.0/24"
                }
              },
              "resources": [
                {
                  "name": "[parameters('virtualNetworkName')]",
                  "type": "Microsoft.Network/virtualNetworks",
                  "location": "[parameters('location')]",
                  "apiVersion": "2020-05-01",
                  "properties": {
                    "addressSpace": {
                      "addressPrefixes": [
                        "[parameters('virtualNetworkAddressRange')]"
                      ]
                    },
                    "subnets": [
                      {
                        "name": "[parameters('subnetName_Management')]",
                        "properties": {
                          "addressPrefix": "[parameters('subnetRange_Management')]"
                        }
                      },
                      {
                        "name": "[parameters('subnetName_Control')]",
                        "properties": {
                          "addressPrefix": "[parameters('subnetRange_Control')]"
                        }
                      },
                      {
                        "name": "[parameters('subnetName_Analytics')]",
                        "properties": {
                          "addressPrefix": "[parameters('subnetRange_Analytics')]"
                        }
                      },
                      {
                        "name": "[parameters('subnetName_Performance')]",
                        "properties": {
                          "addressPrefix": "[parameters('subnetRange_Performance')]"
                        }
                      },
                      {
                        "name": "[parameters('subnetName_Monitoring')]",
                        "properties": {
                          "addressPrefix": "[parameters('subnetRange_Monitoring')]"
                        }
                      },
                      {
                        "name": "[parameters('subnetName_Workloads')]",
                        "properties": {
                          "addressPrefix": "[parameters('subnetRange_Workloads')]"
                        }
                      },
                      {
                        "name": "[parameters('subnetName_Kubernetes')]",
                        "properties": {
                          "addressPrefix": "[parameters('subnetRange_Kubernetes')]"
                        }
                      },
                      {
                        "name": "[parameters('subnetName_Accelerator')]",
                        "properties": {
                          "addressPrefix": "[parameters('subnetRange_Accelerator')]"
                        }
                      },
                      {
                        "name": "AzureBastionSubnet",
                        "properties": {
                          "addressPrefix": "[parameters('subnetRange_Bastion')]"
                        }
                      }
                    ]
                  }
                }
              ],
              "outputs": {
                "virtualNetworkId" : {
                  "type" : "string",
                  "value": "[resourceId('Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]"
                },
                "subnetName_Monitoring" : {
                  "type" : "string",
                  "value": "[parameters('subnetName_Monitoring')]"
                },
                "subnetRef_Monitoring" : {
                  "type" : "string",
                  "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets',parameters('virtualNetworkName'),parameters('subnetName_Monitoring'))]"
                },
                "subnetRef_Bastion" : {
                  "type" : "string",
                  "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets',parameters('virtualNetworkName'),'BastionSubnet')]"
                }
              }
            }          
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2021-04-01",
        "name": "[variables('linkedTemplateName_bastion')]",
        "dependsOn": [ 
          "[variables('linkedTemplateName_vnet-riverbed-headend')]"
        ],
        "properties": {
          "mode": "Incremental",
          "expressionEvaluationOptions": {
              "scope": "inner"
          },          
          "parameters": {
            "location":{
              "value":"[variables('location')]"
            },
            "existingVirtualNetworkId" : {
              "value": "[reference(variables('linkedTemplateName_vnet-riverbed-headend')).outputs.virtualNetworkId.value]"
            }
          },
          "template":
            {
                "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                "contentVersion": "1.0.0.0",
                "parameters": {
                    "location": {
                        "type": "string",
                        "defaultValue": "[resourceGroup().location]",
                        "metadata": {
                            "description": "Azure region for Bastion and virtual network"
                        }
                    },
                    "existingVirtualNetworkId": {
                        "type": "string",
                        "metadata": {
                            "description": "Name of the existing VNET"
                        }
                    },
                    "bastion-host-name": {
                        "type": "string",
                        "metadata": {
                            "description": "Name of Azure Bastion resource"
                        },
                        "defaultValue" : "bastion"
                    }
                },
                "variables": {
                    "public-ip-address-name": "[concat(parameters('bastion-host-name'),'-pip')]",
                    "subnetRef": "[concat(parameters('existingVirtualNetworkId'),'/subnets/','AzureBastionSubnet')]"
                },
                "resources": [
                    {
                        "apiVersion": "2020-05-01",
                        "type": "Microsoft.Network/publicIpAddresses",
                        "name": "[variables('public-ip-address-name')]",
                        "location": "[parameters('location')]",
                        "sku": {
                            "name": "Standard"
                        },
                        "properties": {
                            "publicIPAllocationMethod": "Static"
                        }
                    },
                    {
                        "apiVersion": "2020-05-01",
                        "type": "Microsoft.Network/bastionHosts",
                        "name": "[parameters('bastion-host-name')]",
                        "location": "[parameters('location')]",
                        "dependsOn": [
                            "[resourceId('Microsoft.Network/publicIpAddresses', variables('public-ip-address-name'))]"
                        ],
                        "properties": {
                            "ipConfigurations": [
                                {
                                    "name": "IpConfiguration",
                                    "properties": {
                                        "subnet": {
                                            "id": "[variables('subnetRef')]"
                                        },
                                        "publicIPAddress": {
                                            "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('public-ip-address-name'))]"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            }          
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2021-04-01",
        "name": "[variables('linkedTemplateName_steeldemo-visibility-vm')]",
        "dependsOn": [ 
          "[variables('linkedTemplateName_vnet-riverbed-headend')]",
          "[variables('linkedTemplateName_bastion')]"
        ],
        "properties": {
          "mode": "Incremental",
          "expressionEvaluationOptions": {
              "scope": "inner"
          },          
          "parameters": {
            "location":{
              "value":"[variables('location')]"
            },
            "existingVirtualNetworkId" : {
              "value": "[reference(variables('linkedTemplateName_vnet-riverbed-headend')).outputs.virtualNetworkId.value]"
            },
            "existingSubnetName" : {
              "value": "Monitoring"
            },
            "virtualMachineName": {
              "value": "Visibility"
            },
            "adminUsername":{
              "value": "[parameters('demoJumpboxUsername')]"
            },
            "adminPassword":{
              "value": "[parameters('demoJumpboxPassword')]"
            }
          },
          "template":
            {
                "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                "contentVersion": "1.0.0.210512",
                "parameters": {
                    "location": {
                        "type": "string",
                        "defaultValue": "[resourceGroup().location]",
                        "metadata": {
                            "description": "Location for all resources."
                        }
                    },
                    "existingVirtualNetworkId": {
                        "type": "string",
                        "metadata": {
                            "description": "Name of the existing VNET"
                        }
                    },
                    "existingSubnetName": {
                        "type": "string",
                        "defaultValue" : "Monitoring",
                        "metadata": {
                            "description": "Name of the subnet in the virtual network you want to use"
                        }
                    },
                    "virtualMachineName": {
                        "type": "string",
                        "defaultValue" : "Visibility"
                    },
                    "virtualMachineComputerName": {
                        "type": "string",
                        "defaultValue" : "[parameters('virtualMachineName')]"
                    },
                    "networkInterfaceName": {
                        "type": "string",
                        "defaultValue": "[parameters('virtualMachineName')]"
                    },
                    "networkSecurityGroupName": {
                        "type": "string",
                        "defaultValue": "[parameters('virtualMachineName')]"
                    },
                    "osDiskType": {
                        "type": "string",
                        "defaultValue": "StandardSSD_LRS"
                    },
                    "virtualMachineSize": {
                        "type": "string",
                        "defaultValue": "Standard_B4ms"
                    },
                    "adminUsername": {
                        "type": "string",
                        "defaultValue": "riverbed-community"
                    },
                    "adminPassword": {
                        "type": "secureString"
                    },
                    "imageReferenceWindows10SKU" : {
                        "type": "string",
                        "defaultValue" : "20h2-ent"
                    }
                },
                "variables": {
                    "subnetRef": "[concat(parameters('existingVirtualNetworkId'), '/subnets/', parameters('existingSubnetName'))]",
                    "nsgId": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                },
                "resources": [
                    {
                        "name": "[parameters('networkSecurityGroupName')]",
                        "type": "Microsoft.Network/networkSecurityGroups",
                        "apiVersion": "2019-02-01",
                        "location": "[parameters('location')]"
                    },
                    {
                        "name": "[parameters('networkInterfaceName')]",
                        "type": "Microsoft.Network/networkInterfaces",
                        "apiVersion": "2018-10-01",
                        "location": "[parameters('location')]",
                        "dependsOn": [
                            "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]"            ],
                        "properties": {
                            "ipConfigurations": [
                                {
                                    "name": "ipconfig1",
                                    "properties": {
                                        "subnet": {
                                            "id": "[variables('subnetRef')]"
                                        },
                                        "privateIPAllocationMethod": "Dynamic"
                                    }
                                }
                            ],
                            "networkSecurityGroup": {
                                "id": "[variables('nsgId')]"
                            }
                        }
                    },
                    {
                        "name": "[parameters('virtualMachineName')]",
                        "type": "Microsoft.Compute/virtualMachines",
                        "apiVersion": "2021-03-01",
                        "location": "[parameters('location')]",
                        "dependsOn": [
                            "[concat('Microsoft.Network/networkInterfaces/', parameters('networkInterfaceName'))]"
                        ],
                        "properties": {
                            "hardwareProfile": {
                                "vmSize": "[parameters('virtualMachineSize')]"
                            },
                            "storageProfile": {
                                "osDisk": {
                                    "createOption": "fromImage",
                                    "managedDisk": {
                                        "storageAccountType": "[parameters('osDiskType')]"
                                    }
                                },
                                "imageReference": {
                                    "publisher": "MicrosoftWindowsDesktop",
                                    "offer": "Windows-10",
                                    "sku": "[parameters('imageReferenceWindows10SKU')]",
                                    "version": "latest"
                                }
                            },
                            "networkProfile": {
                                "networkInterfaces": [
                                    {
                                        "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                                    }
                                ]
                            },
                            "osProfile": {
                                "computerName": "[parameters('virtualMachineComputerName')]",
                                "adminUsername": "[parameters('adminUsername')]",
                                "adminPassword": "[parameters('adminPassword')]",
                                "windowsConfiguration": {
                                    "enableAutomaticUpdates": true,
                                    "provisionVmAgent": true,
                                    "patchSettings": {
                                        "enableHotpatching": false,
                                        "patchMode": "AutomaticByOS"
                                    }
                                }
                            },
                            "licenseType": "Windows_Client",
                            "diagnosticsProfile": {
                                "bootDiagnostics": {
                                    "enabled": true
                                }
                            }
                        }
                    }
                ],
                "outputs": {
                    "adminUsername": {
                        "type": "string",
                        "value": "[parameters('adminUsername')]"
                    }
                }
            }          
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2021-04-01",
        "name": "[variables('linkedTemplateName_portal')]",
        "dependsOn": [ 
          "[variables('linkedTemplateName_ImportVHD_Portal')]",
          "[variables('linkedTemplateName_vnet-riverbed-headend')]",
          "[variables('linkedTemplateName_bastion')]"          
        ],
        "properties": {
          "mode": "Incremental",
          "expressionEvaluationOptions": {
              "scope": "inner"
          },              
          "parameters": {
            "location":{
              "value":"[variables('location')]"
            },
            "version": {
              "value": "[parameters('version')]"
            },
            "vmSize" : {
              "value": "[parameters('applianceSize')]"              
            },
            "existingStorageAccountId" : {
              "value": "[reference(variables('linkedTemplateName_Create-WritableBlobContainerUri')).outputs.storageAccountId.value]"
            },
            "existingVhdBlobContainerUri":{
              "value": "[reference(variables('linkedTemplateName_Create-WritableBlobContainerUri')).outputs.uriBlobContainer.value]"
            },
            "existingDiagStorageUri":{
              "value": "[reference(variables('linkedTemplateName_Create-WritableBlobContainerUri')).outputs.uriBlobStorage.value]"
            },
            "existingVirtualNetworkId" : {
              "value": "[reference(variables('linkedTemplateName_vnet-riverbed-headend')).outputs.virtualNetworkId.value]"
            },
            "existingSubnetName" : {
              "value": "[reference(variables('linkedTemplateName_vnet-riverbed-headend')).outputs.subnetName_Monitoring.value]"
            }
          },
          "template":
            {
              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
              "contentVersion": "1.0.0.210530",
              "parameters": {
                "location": {
                  "type": "string",
                  "defaultValue": "[resourceGroup().location]",
                  "metadata": {
                    "description": "Location for all resources."
                  }
                },
                "version" : {
                  "type": "string",
                  "defaultValue": "3.5.0",
                  "allowedValues" : [
                    "3.5.0"
                  ],
                  "metadata": {
                    "description": "version of Riverbed Portal"
                  }        
                },
                "existingStorageAccountId" : {
                  "type": "string",
                  "metadata": {
                    "description": "Resource Id of the existing Storage Account having the Blob Container containing the VHD Blob image. For example: /subscriptions/1234123-1234-1234-13241234/resourceGroups/riverbed-community-demo/providers/Microsoft.Storage/storageAccounts/your-storage-account"
                  }
                },
                "existingVhdBlobContainerUri" : {
                  "type": "string",
                  "metadata": {
                    "description": "Uri of the existing Blob Container containing the VHD Blob image for Portal. For example: https://your-storage-account.blob.core.windows.net/vhd"
                  }
                },
                "existingDiagStorageUri": {
                  "type": "string",
                  "metadata": {
                    "description": "Uri of an existing Storage Account. For example: https://your-storage-account.blob.core.windows.net"
                  }
                },
                "existingVirtualNetworkId": {
                  "type": "string",
                  "metadata": {
                    "description": "Resource Id of the existing VNET. For example: /subscriptions/1234123-1234-1234-13241234/resourceGroups/riverbed-community-demo/providers/Microsoft.Network/virtualNetworks/riverbed-community-headend"
                  }
                },
                "existingSubnetName": {
                  "type": "string",
                  "defaultValue" : "Monitoring",
                  "metadata": {
                    "description": "Name of the subnet in the virtual network you want to use"
                  }
                },
                "vmName": {
                  "type": "string",
                  "defaultValue" : "Portal",
                  "metadata": {
                    "description": "Name of the VM for Portal node"
                  }
                },
                "vmSize": {
                  "type": "string",
                  "defaultValue" : "Standard_B8ms",
                  "metadata": {
                    "description": "Size of the VM. Minimum: Standard_B8ms, Recommended: Standard_E8s_v4, Other recommended: Standard_F16s"
                  }
                },
                "osDiskSizeGB" : {
                  "type": "int",
                  "defaultValue" : 1863,
                  "metadata": {
                    "description": "OS Disk Size"
                  }
                },
                "privateIP" : {
                  "type": "string",
                  "defaultValue" : "10.100.5.5",
                  "metadata":{
                    "description" : "Private IP reserved in the existing subnet range for Portal"
                  }
                }
              },
              "variables": {
                "nicName": "[concat(parameters('vmName'), '-nic1')]",

                "portal_version_vhd": {
                    "3.5.0": "Portal_3.5.0.vhd"
                },
                "osDiskVhdUri": "[concat(parameters('existingVhdBlobContainerUri'),'/',variables('portal_version_vhd')[parameters('version')])]",
                "subnetRef": "[concat(parameters('existingVirtualNetworkId'),'/subnets/',parameters('existingSubnetName'))]"
              },
              "resources": [
                {
                    "apiVersion": "2021-04-01",
                    "name": "pid-b938b504-21bf-4ea4-bc72-94d11f365a0d",
                    "type": "Microsoft.Resources/deployments",
                    "properties": {
                        "mode": "Incremental",
                        "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "resources": []
                        }
                    }
                },
                {
                  "apiVersion": "2020-05-01",
                  "type": "Microsoft.Network/networkInterfaces",
                  "name": "[variables('nicName')]",
                  "location": "[parameters('location')]",
                  "properties": {
                    "ipConfigurations": [
                      {
                        "name": "ipconfig1",
                        "properties": {
                          "privateIPAllocationMethod": "Static",
                          "privateIPAddress" : "[parameters('privateIP')]",
                          "subnet": {
                            "id": "[variables('subnetRef')]"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "Microsoft.Compute/disks",
                  "apiVersion": "2019-07-01",
                  "name": "[concat(parameters('vmName'), '_OS')]",
                  "location": "[parameters('location')]",
                  "properties": {
                    "creationData": {
                      "createOption": "Import",
                      "sourceUri": "[variables('osDiskVhdUri')]",
                      "storageAccountId" : "[parameters('existingStorageAccountId')]"
                    },
                    "diskSizeGB" : "[parameters('osDiskSizeGB')]",
                    "osType": "Linux"
                  }
                },

                {
                  "apiVersion": "2019-07-01",
                  "type": "Microsoft.Compute/virtualMachines",
                  "name": "[parameters('vmName')]",
                  "location": "[parameters('location')]",
                  "dependsOn": [
                    "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]",
                    "[resourceId('Microsoft.Compute/disks/',concat(parameters('vmName'), '_OS'))]"
                  ],
                  "properties": {
                    "hardwareProfile": {
                      "vmSize": "[parameters('vmSize')]"
                    },
                    "storageProfile": {
                      "osDisk": {
                        "osType": "Linux",
                        "caching": "ReadWrite",
                        "createOption": "Attach",
                        "managedDisk": {
                          "id": "[resourceId('Microsoft.Compute/disks', concat(parameters('vmName'), '_OS'))]"
                        }
                      }
                    },
                    "networkProfile": {
                      "networkInterfaces": [
                        {
                          "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                      ]
                    },
                    "diagnosticsProfile": {
                      "bootDiagnostics": {
                        "enabled":  true ,
                        "storageUri": "[parameters('existingDiagStorageUri')]"
                      }
                    }
                  }
                }
              ],
              "outputs" : {
                "privateIpAddress" : {
                  "type" : "string",
                  "value" : "[parameters('privateIP')]"
                },
                "initialUsername" : {
                  "type" : "string",
                  "value" : "admin"
                },
                "initialPassword" : {
                  "type" : "string",
                  "value" : "[reference(parameters('vmName')).vmId]"
                }
              }
            }
        }
      }
    ],
    "outputs": {
      "portal_private_ip_address" : {
        "type" : "string",
        "value" : "[reference(variables('linkedTemplateName_portal')).outputs.privateIpAddress.value]"
      },
      "portal_initial_username" : {
        "type" : "string",
        "value" : "[reference(variables('linkedTemplateName_portal')).outputs.initialUsername.value]"
      },
      "portal_initial_password" : {
        "type" : "string",
        "value" : "[reference(variables('linkedTemplateName_portal')).outputs.initialPassword.value]"
      }
    }
}